local tasks:
- lint (code validation)
- minify (strip whitespaces and comments from css, js)
- build css (variables for colors and breakpoints, do we need SASS?)
// https://www.npmjs.com/package/sass-lint
/*

Ein paar lokale Tools kann man schon benutzen,
auch die in native SASS-Implementation,
aber auf grunt kann man verzichten,
und Java (s.u.) ist auch zu schwergewichtig für so ein kleines Projekt.

Nachdem aber auch node immer noch furchtbar ist und sich node-sass
nicht problemlos überall installieren lässt, kann man auch die nativen packages
mit ordentlichen Package managern wie apt installieren und der UNIX-Tradition
folgen.
Dementsprechend muss man die Dependencies dokumentieren.


Die package.json kann man von node erstellen lassen
und dann ggf. nachbearbeiten (vereinfachen/lockern).

Ebenso muss man nicht alle SASS-Styleguides berücksichtigen
und kann die wenigen Media Queries auch einfach als plain old CSS schreiben.


SMACSS, SCSS guidelines and common module names, BEM etc:
https://sass-guidelin.es/#responsive-web-design-and-breakpoints
http://timhartmann.net/frontend-development/scss-styleguide-with-bem-oocss-smacss/
https://smacss.com/


Tim Hartmann: You write modules, then you should declare the responsive behaviour of it there. Not in another file.

$breakpoints: (
  'medium': (min-width: 800px),
  'large': (min-width: 1000px),
  'huge': (min-width: 1200px),
);

example:
applicaton.scss // as the only file which includes other files

@charset "UTF-8";

// Base
@import "_base/_config",
        "_base/_presets",
        "_base/_headings";

// Layouts
@import "_layouts/_l-default";

// Modules
@import "_modules/_m-buttons",
        "_modules/_m-tabs";

        BEM/SMACSS naming

// Layouts
// Prefix "l-"
.l-default {}

// Modules
// Prefix "m-"
.m-accordion {}

// Child element of accordion
// Seperator: "__"
.m-accordion__trigger {}

// Modifier of accordion
// Seperator: "--"
.m-accordion--plain {}

// States
// Mostly with prefix like "is-"
.is-active {}
.is-hidden {}


// Colors (global)
$white: #fff;
$blue: #1675d6;
$red: #e8402a;

// Specific naming
$button-bgcolor: $blue;
$button-fontcolor: $white;


Sass-lint can be configured from a .sass-lint.yml file in your project.
If you don't have one in the root of your project or you would like all your projects
to follow a standard config file then you can specify the path to one in your project's package.json file.

http://thesassway.com/intermediate/using-source-maps-with-sass

For Sass, this is as easy as adding a flag to Sass's command line tool:
$ sass sass/screen.scss:stylesheets/screen.css --sourcemap

https://www.npmjs.com/package/node-sass
npm install node-sass
Some users have reported issues installing on Ubuntu due to node being registered to another package.
Follow the official NodeJS docs to install NodeJS so that #!/usr/bin/env node correctly resolved.

https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map
https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/

Like I mentioned above you'll need to use the Closure compiler to minify,
concat and generate a source map for your JavaScript files.

java -jar compiler.jar \
     --js script.js \
     --create_source_map ./script-min.js.map \
     --source_map_format=V3 \
     --js_output_file script-min.js

Closure Compiler für NPM, der ein JDK voraussetzt:
https://www.npmjs.com/package/google-closure-compiler

Reine JS-Version davon:
https://github.com/google/closure-compiler-js

*/


/*
POST /contact/send

Require Method POST

Require all expected field values

Require all fake fields empty

Avoid captcha and CSRF for Usability and Cacheability.

Prefer local mta.

Escape all form input.

Add headers (ordentlich footer ) without Client IP, UA, Cookies.

Harcoded recipient address and subject.

IP to lockfile with retry count.

Purge all old lockfiles.

Fail on max count exceeded.

Handle errors: alternate Subject and recipient (Spamverdacht)

Same response HTML thanks + back Homepage Button, uncacheable.
 -- (if ajaxRequest) only return form fragment (otherwise whole page require main index.html replace form)
 -- headers noindex, nofollow, expires cache-control private must-revalidate

Errors Add Cookie Spamverdacht++ jsurferid either generate uuid or reuse sanitized jsurferid from existing cookie.

Honeypot fake forms always fail with error status, retry message and Same Form again and adding spampoison Code.

Check Mail settings, possibly disallow send without auth.
*/
